{
  "status": {
    "timestamp": "2023-11-23T23:06:52.088Z",
    "error_code": 0,
    "error_message": null,
    "elapsed": 12,
    "credit_count": 1,
    "notice": null
  },
  "data": {
    "1765": {
      "id": 1765,
      "name": "EOS",
      "symbol": "EOS",
      "slug": "eos",
      "num_market_pairs": 596,
      "date_added": "2017-07-01T00:00:00.000Z",
      "tags": [
        {
          "slug": "medium-of-exchange",
          "name": "Medium of Exchange",
          "category": "INDUSTRY"
        },
        {
          "slug": "enterprise-solutions",
          "name": "Enterprise Solutions",
          "category": "INDUSTRY"
        },
        {
          "slug": "smart-contracts",
          "name": "Smart Contracts",
          "category": "CATEGORY"
        },
        {
          "slug": "eos",
          "name": "EOS",
          "category": "PLATFORM"
        },
        {
          "slug": "fenbushi-capital-portfolio",
          "name": "Fenbushi Capital Portfolio",
          "category": "CATEGORY"
        },
        {
          "slug": "galaxy-digital-portfolio",
          "name": "Galaxy Digital Portfolio",
          "category": "CATEGORY"
        },
        {
          "slug": "dwf-labs-portfolio",
          "name": "DWF Labs Portfolio",
          "category": "CATEGORY"
        }
      ],
      "max_supply": null,
      "circulating_supply": 1109302019.6892,
      "total_supply": 1109302019.6892,
      "is_active": 1,
      "infinite_supply": true,
      "platform": null,
      "cmc_rank": 67,
      "is_fiat": 0,
      "self_reported_circulating_supply": 1109302019.6892,
      "self_reported_market_cap": 748319493.8698994,
      "tvl_ratio": null,
      "last_updated": "2023-11-23T23:05:00.000Z",
      "quote": {
        "USD": {
          "price": 0.6745858932804979,
          "volume_24h": 102638282.8657994,
          "volume_24h_reported": 389708361.1005,
          "volume_7d": 982890567.2367916,
          "volume_7d_reported": 4400309704.0814,
          "volume_30d": 3601643011.2820544,
          "volume_30d_reported": 15022035901.789,
          "volume_change_24h": -13.9799,
          "percent_change_1h": 0.36027974,
          "percent_change_24h": -0.48784227,
          "percent_change_7d": -4.45529918,
          "percent_change_30d": 12.95368348,
          "percent_change_60d": 16.90067084,
          "percent_change_90d": 15.01233065,
          "market_cap": 748319493.8698994,
          "market_cap_dominance": 0.0528,
          "fully_diluted_market_cap": 748319493.87,
          "tvl": null,
          "market_cap_by_total_supply": 748319493.8698994,
          "last_updated": "2023-11-23T23:05:00.000Z"
        }
      }
    }
  }
}


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Pagination Example</title>
  <style>
    .pagination {
      display: flex;
      list-style: none;
      padding: 0;
    }

    .pagination button {
      margin: 0 5px;
      cursor: pointer;
      padding: 5px 10px;
    }
  </style>
</head>
<body>

<div id="data-container"></div>
<ul id="pagination" class="pagination">
  <button id="prevBtn">Previous</button>
  <button id="page1">1</button>
  <button id="page2">2</button>
  <button id="page3">3</button>
  <button id="page4">4</button>
  <button id="page5">5</button>
  <button id="nextBtn">Next</button>
</ul>

<script>
  const itemsPerPage = 100;
  let currentPage = 1;

  // Function to fetch data from the API
  function fetchData(start) {
    // Your API call logic here
    console.log(`Fetching data starting from ${start}`);
    // For this example, let's assume you have a function that fetches data
    // and updates the UI with the received data.
    // updateUIWithData(apiData);
  }

  // Function to update UI with data
  function updateUIWithData(data) {
    // Update the UI with the received data
    document.getElementById('data-container').innerHTML = JSON.stringify(data, null, 2);
  }

  // Function to handle page clicks
  function handlePageClick(page) {
    const start = (page - 1) * itemsPerPage + 1;
    currentPage = page;
    fetchData(start);
    updatePaginationButtons();
  }

  // Function to update the state of pagination buttons
  function updatePaginationButtons() {
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');

    prevBtn.disabled = currentPage === 1;
    nextBtn.disabled = currentPage === totalPages;

    for (let i = 1; i <= 5; i++) {
      const pageBtn = document.getElementById(`page${i}`);
      const pageNumber = currentPage + i - 3;
      const start = (pageNumber - 1) * itemsPerPage + 1;
      pageBtn.textContent = pageNumber;
      pageBtn.disabled = start < 1 || start > 1000;
    }
  }

  // Event listeners for pagination buttons
  document.getElementById('prevBtn').addEventListener('click', () => handlePageClick(currentPage - 1));
  document.getElementById('nextBtn').addEventListener('click', () => handlePageClick(currentPage + 1));
  for (let i = 1; i <= 5; i++) {
    document.getElementById(`page${i}`).addEventListener('click', () => handlePageClick(currentPage + i - 3));
  }

  // Initial data fetch
  const totalPages = Math.ceil(1000 / itemsPerPage); // Assuming 1000 total records
  fetchData(1);
  updatePaginationButtons();
</script>

</body>
</html>
